3:I[5613,[],""]
5:I[1778,[],""]
6:I[7709,["229","static/chunks/229-547ffddabf4aab4b.js","250","static/chunks/250-e3db70cd67721be2.js","185","static/chunks/app/layout-783e4ec1f7ab0a4c.js"],""]
7:I[8667,["160","static/chunks/app/not-found-28d903cad857ed6b.js"],""]
4:["slug","shallow-gp3-iops-setting","d"]
0:["Ac95LKkA6m3HIFDrj9yEF",[[["",{"children":["(pages)",{"children":["shallow",{"children":[["slug","shallow-gp3-iops-setting","d"],{"children":["__PAGE__?{\"slug\":\"shallow-gp3-iops-setting\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(pages)",{"children":["shallow",{"children":[["slug","shallow-gp3-iops-setting","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(pages)","children","shallow","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(pages)","children","shallow","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(pages)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"kr","children":[["$","head",null,{"children":[["$","meta",null,{"name":"naver-site-verification","content":"e782934088f4524e1d46947402328d9864f04318"}],["$","meta",null,{"name":"google-site-verification","content":"EB5qLPhkvA7mD6Yz6VpiZaMErWP4KIB7Aj_rR-xqdsA"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"__className_a1b02f","children":["$","div",null,{"children":[["$","div",null,{"children":[["$","$L6",null,{}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L7",null,{}],"notFoundStyles":[],"styles":null}]],"style":{},"className":"mx-auto max-w-[1080px] h-auto px-1"}],["$","div",null,{"children":["$","div",null,{"children":[["$","div",null,{"children":[["$","p",null,{"children":"Dong-Hyun Wi","style":{},"className":"font-bold text-2xl"}],["$","p",null,{"children":"weaall@naver.com","style":{},"className":"text-sm"}],["$","p",null,{"children":"weaall88@gmail.com","style":{},"className":"text-sm"}]],"style":{},"className":"flex flex-col m-auto text-center space-y-1 w-[33%]"}],["$","div",null,{"children":["$","img",null,{"alt":"","src":"../../assets/svg/user_icon.svg","style":{},"className":"w-8 h-full m-auto group-hover:scale-110"}],"style":{},"className":"flex flex-col m-auto text-center space-y-1 w-[33%]"}],["$","div",null,{"children":[["$","a",null,{"href":"/","children":"Main","style":{},"className":"font-bold text-base"}],["$","a",null,{"href":"/shallow","children":"Shallow","style":{},"className":"font-bold text-base"}],["$","a",null,{"href":"/deep","children":"Deep","style":{},"className":"font-bold text-base"}],["$","a",null,{"href":"/","children":"Me","style":{},"className":"font-bold text-base"}]],"style":{},"className":"flex m-auto space-x-4 w-[33%] justify-center"}]],"style":{},"className":"mx-auto max-w-[1080px] h-40 justify-between flex mobile:flex-col mobile:h-52"}],"style":{},"className":"w-full border-t mt-20 text-t-main"}]],"style":{},"className":"mx-auto text-main max-w-[1080px]"}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/6a5f3c35560f6327.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/f2d33f059b111d78.css","precedence":"next","crossOrigin":""}]],"$L8"]]]]
9:I[9275,["229","static/chunks/229-547ffddabf4aab4b.js","101","static/chunks/app/(pages)/shallow/%5Bslug%5D/page-414d879e3fc44767.js"],"MDXContent"]
a:T1fb0,<span class="hljs-keyword">import</span> boto3
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta

<span class="hljs-keyword">def</span> <span class="hljs-title function_">lambda_handler</span>(<span class="hljs-params">event, context</span>):
    db_instance_identifier = os.environ[<span class="hljs-string">&#x27;DB_INSTANCE_IDENTIFIER&#x27;</span>]  <span class="hljs-comment"># 환경 변수에서 RDS 인스턴스 ID 가져오기</span>
    cloudwatch = boto3.client(<span class="hljs-string">&#x27;cloudwatch&#x27;</span>)
    
    <span class="hljs-comment"># 지난 5분의 평균 IOPS와 쓰루풋 조회</span>
    average_iops = get_average_iops(db_instance_identifier, cloudwatch)
    average_throughput = get_average_throughput(db_instance_identifier, cloudwatch)

    <span class="hljs-comment"># 새로운 IOPS와 쓰루풋 계산</span>
    new_iops = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">int</span>(average_iops * <span class="hljs-number">1.15</span>), <span class="hljs-number">3000</span>)  <span class="hljs-comment"># 15% 증가 및 최소 IOPS 3000</span>
    new_throughput = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">int</span>(average_throughput * <span class="hljs-number">1.15</span>), <span class="hljs-number">125</span>)  <span class="hljs-comment"># 15% 증가, 최소 125 MiB/s 제한</span>

    <span class="hljs-comment"># 결과 반환</span>
    <span class="hljs-keyword">return</span> {
        <span class="hljs-string">&#x27;statusCode&#x27;</span>: <span class="hljs-number">200</span>,
        <span class="hljs-string">&#x27;body&#x27;</span>: <span class="hljs-string">f&#x27;Calculated IOPS: <span class="hljs-subst">{new_iops}</span>, Calculated Throughput: <span class="hljs-subst">{new_throughput}</span> MiB/s&#x27;</span>
    }

<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_average_iops</span>(<span class="hljs-params">db_instance_identifier, cloudwatch</span>):
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(minutes=<span class="hljs-number">5</span>)
    
    <span class="hljs-comment"># 읽기와 쓰기 IOPS 메트릭을 가져옴</span>
    read_response = cloudwatch.get_metric_statistics(
        Namespace=<span class="hljs-string">&#x27;AWS/RDS&#x27;</span>,
        MetricName=<span class="hljs-string">&#x27;ReadIOPS&#x27;</span>,
        StartTime=start_time,
        EndTime=end_time,
        Period=<span class="hljs-number">60</span>,
        Statistics=[<span class="hljs-string">&#x27;Average&#x27;</span>],
        Dimensions=[{<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;DBInstanceIdentifier&#x27;</span>, <span class="hljs-string">&#x27;Value&#x27;</span>: db_instance_identifier}]
    )
    
    write_response = cloudwatch.get_metric_statistics(
        Namespace=<span class="hljs-string">&#x27;AWS/RDS&#x27;</span>,
        MetricName=<span class="hljs-string">&#x27;WriteIOPS&#x27;</span>,
        StartTime=start_time,
        EndTime=end_time,
        Period=<span class="hljs-number">60</span>,
        Statistics=[<span class="hljs-string">&#x27;Average&#x27;</span>],
        Dimensions=[{<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;DBInstanceIdentifier&#x27;</span>, <span class="hljs-string">&#x27;Value&#x27;</span>: db_instance_identifier}]
    )
    
    <span class="hljs-comment"># 읽기와 쓰기 IOPS 평균을 더함</span>
    read_iops = <span class="hljs-built_in">sum</span>(dp[<span class="hljs-string">&#x27;Average&#x27;</span>] <span class="hljs-keyword">for</span> dp <span class="hljs-keyword">in</span> read_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) / <span class="hljs-built_in">len</span>(read_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) <span class="hljs-keyword">if</span> read_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>
    write_iops = <span class="hljs-built_in">sum</span>(dp[<span class="hljs-string">&#x27;Average&#x27;</span>] <span class="hljs-keyword">for</span> dp <span class="hljs-keyword">in</span> write_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) / <span class="hljs-built_in">len</span>(write_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) <span class="hljs-keyword">if</span> write_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>

    average_iops = read_iops + write_iops  <span class="hljs-comment"># 읽기와 쓰기 IOPS 합산</span>
    <span class="hljs-keyword">return</span> average_iops

<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_average_throughput</span>(<span class="hljs-params">db_instance_identifier, cloudwatch</span>):
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(minutes=<span class="hljs-number">5</span>)
    
    <span class="hljs-comment"># ReadThroughput과 WriteThroughput 메트릭을 가져옴</span>
    read_response = cloudwatch.get_metric_statistics(
        Namespace=<span class="hljs-string">&#x27;AWS/RDS&#x27;</span>,
        MetricName=<span class="hljs-string">&#x27;ReadThroughput&#x27;</span>,
        StartTime=start_time,
        EndTime=end_time,
        Period=<span class="hljs-number">60</span>,
        Statistics=[<span class="hljs-string">&#x27;Average&#x27;</span>],
        Dimensions=[{<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;DBInstanceIdentifier&#x27;</span>, <span class="hljs-string">&#x27;Value&#x27;</span>: db_instance_identifier}]
    )
    
    write_response = cloudwatch.get_metric_statistics(
        Namespace=<span class="hljs-string">&#x27;AWS/RDS&#x27;</span>,
        MetricName=<span class="hljs-string">&#x27;WriteThroughput&#x27;</span>,
        StartTime=start_time,
        EndTime=end_time,
        Period=<span class="hljs-number">60</span>,
        Statistics=[<span class="hljs-string">&#x27;Average&#x27;</span>],
        Dimensions=[{<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;DBInstanceIdentifier&#x27;</span>, <span class="hljs-string">&#x27;Value&#x27;</span>: db_instance_identifier}]
    )
    
    <span class="hljs-comment"># 읽기와 쓰기 바이트 평균을 더해 Throughput을 MiB 단위로 변환</span>
    read_bytes = <span class="hljs-built_in">sum</span>(dp[<span class="hljs-string">&#x27;Average&#x27;</span>] <span class="hljs-keyword">for</span> dp <span class="hljs-keyword">in</span> read_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) / <span class="hljs-built_in">len</span>(read_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) <span class="hljs-keyword">if</span> read_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>
    write_bytes = <span class="hljs-built_in">sum</span>(dp[<span class="hljs-string">&#x27;Average&#x27;</span>] <span class="hljs-keyword">for</span> dp <span class="hljs-keyword">in</span> write_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) / <span class="hljs-built_in">len</span>(write_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>]) <span class="hljs-keyword">if</span> write_response[<span class="hljs-string">&#x27;Datapoints&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>

    average_throughput_mib = (read_bytes + write_bytes) / (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)  <span class="hljs-comment"># MiB 단위로 변환</span>
    <span class="hljs-keyword">return</span> average_throughput_mib

2:["$","$L9",null,{"content":[["$","h2",null,{"children":["$","a",null,{"href":"#Auto buffer","children":"Auto buffer"}],"style":{},"className":"text-xl font-bold mt-0 mb-9 after:content-['.'] after:text-red-500 cursor-pointer"}],"\n",["$","p",null,{"children":"AWS GP3 RDS를 사용할 때 IOPS와 Throughput은 스토리지 저장 비용을 제외하고도 추가적인 비용을 필요로 한다.\r\nRedis 캐싱은 최소 60%, 최대 90%까지 IOPS와 Throughput 접근을 줄여서,\r\nIOPS와 Throughput 비용 감소와 RDS 인스턴스 비용 감소에도 도움이 되지만,\r\n사용자 트래픽은 시간대별로 다르므로 실시간 관리 및 자동화 또한 비용절감에 크게 도움이된다.\r\nCloudWatch와 EventBridge, Lambda를 통해 비용 효율적으로 관리해보자.","style":{},"className":"text-base py-3"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"CloudWatch : 기본매트릭 사용 (무료)","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n",["$","li",null,{"children":"Lambda : 월 8640건 이벤트 (월 100만건 무료)","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n",["$","li",null,{"children":"EventBridgeSchedule : 월 8640건 이벤트 (월 100만건 무료)","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n"]}],"\n",["$","h3",null,{"children":"AWS Lambda 함수 생성","style":{},"className":"text-base font-bold my-6"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"AWS Lambda 콘솔에 접속, 함수생성","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n",["$","li",null,{"children":"함수이름을 입력하고, 런타임으로 Python 3.x을 선택 후 함수 생성","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n"]}],"\n",["$","h3",null,{"children":"IAM 역할 설정","style":{},"className":"text-base font-bold my-6"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["구성 -> 권한 -> 역할이름 ",["$","em",null,{"children":"함수이름-role","style":{},"className":"text-sm font-semibold not-italic px-2 py-0.5 bg-rose-50 rounded-xl"}],"클릭"],"style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n",["$","li",null,{"children":["권한추가 -> 권한연결 -> ",["$","em",null,{"children":"CloudWatchReadOnlyAccess","style":{},"className":"text-sm font-semibold not-italic px-2 py-0.5 bg-rose-50 rounded-xl"}]," -> 권한추가"],"style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n"]}],"\n",["$","h3",null,{"children":"환경변수 설정","style":{},"className":"text-base font-bold my-6"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"구성 -> 환경변수 -> 편집","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n",["$","li",null,{"children":[["$","em",null,{"children":"DB_INSTANCE_IDENTIFIER","style":{},"className":"text-sm font-semibold not-italic px-2 py-0.5 bg-rose-50 rounded-xl"}],"를 키, RDS 인스턴스의 DB 식별자를 값으로 입력"],"style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n"]}],"\n",["$","h3",null,{"children":"코드배포","style":{},"className":"text-base font-bold my-6"}],"\n",["$","pre",null,{"children":["$","div",null,{"className":"relative rounded-xl text-base pt-6 mb-10 hljs","children":[["$","div",null,{"children":["$","p",null,{"children":"python","style":{},"className":"text-xl font-bold after:content-['.'] after:text-red-500"}],"style":{},"className":"absolute right-4 top-0 text-main rounded-2xl py-2 px-4 bg-white w-fit mr-4"}],["$","div",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$a"},"style":{},"className":"whitespace-pre-wrap rounded-xl text-t-main my-6 text-sm"}],"style":{},"className":"bg-main p-6 pt-6 rounded-xl"}]],"style":{}}],"style":{},"className":"text-t-main text-base"}],"\n",["$","h3",null,{"children":"테스트","style":{},"className":"text-base font-bold my-6"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"테스트 -> 기본 템플릿 -> 테스트 -> 로그확인","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n"]}],"\n",["$","pre",null,{"children":["$","div",null,{"className":"relative rounded-xl text-base pt-6 mb-10 hljs","children":[["$","div",null,{"children":["$","p",null,{"children":"json","style":{},"className":"text-xl font-bold after:content-['.'] after:text-red-500"}],"style":{},"className":"absolute right-4 top-0 text-main rounded-2xl py-2 px-4 bg-white w-fit mr-4"}],["$","div",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-attr\">&quot;statusCode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;body&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Calculated IOPS: 3000, Calculated Throughput: 125 MiB/s&quot;</span>\r\n<span class=\"hljs-punctuation\">}</span>\n"},"style":{},"className":"whitespace-pre-wrap rounded-xl text-t-main my-6 text-sm"}],"style":{},"className":"bg-main p-6 pt-6 rounded-xl"}]],"style":{}}],"style":{},"className":"text-t-main text-base"}],"\n",["$","h3",null,{"children":"Amazon EventBridge","style":{},"className":"text-base font-bold my-6"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"규칙 -> 규칙생성 -> 일정 -> 이벤트브릿지 스캐줄러에서 계속","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n",["$","li",null,{"children":["일정패턴 -> 반복일정 -> Rate 기반 일정 -> ",["$","em",null,{"children":"rate(5 minutes)","style":{},"className":"text-sm font-semibold not-italic px-2 py-0.5 bg-rose-50 rounded-xl"}]],"style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n",["$","li",null,{"children":"AWS Lambda -> Lambda 함수 선택","style":{},"className":"pl-6 py-2 text-base before:content-['-'] before:font-bold before:pr-3"}],"\n"]}]],"frontmatter":{"label":"AWS","title":"람다(Lambda)를 이용한 AWS GP3 RDS 버퍼 자동화 (IOPS, Throughput)","subTitle":null,"date":"2024.06.01","mins":10,"tags":["AWS","GP3","EBS","RDS","Lambda","IOPS","Throughput","CloudWatch","EventBridge"],"imageUrl":null}}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"람다(Lambda)를 이용한 AWS GP3 RDS 버퍼 자동화 (IOPS, Throughput)"}],["$","meta","3",{"name":"keywords","content":"AWS,GP3,EBS,RDS,Lambda,IOPS,Throughput,CloudWatch,EventBridge"}],["$","link","4",{"rel":"canonical","href":"http://weaall.github.io/shallow-gp3-iops-setting"}],["$","meta","5",{"property":"og:title","content":"람다(Lambda)를 이용한 AWS GP3 RDS 버퍼 자동화 (IOPS, Throughput)"}],["$","meta","6",{"property":"og:url","content":"http://weaall.github.io/shallow-gp3-iops-setting"}],["$","meta","7",{"property":"og:site_name","content":"Weaall's Dive"}],["$","meta","8",{"property":"og:type","content":"article"}],["$","meta","9",{"property":"article:published_time","content":"2024-05-31T15:00:00.000Z"}],["$","meta","10",{"property":"article:modified_time","content":"2024-05-31T15:00:00.000Z"}],["$","meta","11",{"property":"article:author","content":"https://github.com/weaall"}],["$","meta","12",{"property":"article:tag","content":"AWS"}],["$","meta","13",{"property":"article:tag","content":"GP3"}],["$","meta","14",{"property":"article:tag","content":"EBS"}],["$","meta","15",{"property":"article:tag","content":"RDS"}],["$","meta","16",{"property":"article:tag","content":"Lambda"}],["$","meta","17",{"property":"article:tag","content":"IOPS"}],["$","meta","18",{"property":"article:tag","content":"Throughput"}],["$","meta","19",{"property":"article:tag","content":"CloudWatch"}],["$","meta","20",{"property":"article:tag","content":"EventBridge"}],["$","meta","21",{"name":"twitter:card","content":"summary"}],["$","meta","22",{"name":"twitter:title","content":"람다(Lambda)를 이용한 AWS GP3 RDS 버퍼 자동화 (IOPS, Throughput)"}],["$","link","23",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
